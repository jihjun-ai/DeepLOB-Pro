conda activate deeplob-pro

scripts\batch_preprocess.bat

如何選擇合適的股票用於訓練？

python scripts/analyze_label_distribution.py --preprocessed-dir data/preprocessed_v5_1hz --mode recommend --target-dist 0.30,0.40,0.30
python scripts/analyze_label_distribution.py --preprocessed-dir data/preprocessed_swing --mode analyze

1.
python scripts/analyze_label_distribution.py --preprocessed-dir data/preprocessed_swing --mode interactive --start-date 20250901 --min-samples 1000000 --output ./data/dataset_selection.json  --target-dist "0.32,0.43,0.25" 
2.
python scripts/analyze_label_distribution.py --preprocessed-dir data/preprocessed_swing --mode smart_recommend --start-date 20250901 --min-samples 1000000 --output dataset_selection.json

# 基礎用法（均勻分布目標）
python scripts/analyze_label_distribution.py --preprocessed-dir data/preprocessed_swing --mode minimal --min-samples 1000000 --days 10 --output ./data/dataset_selection.json

# 指定目標分布
python scripts/analyze_label_distribution.py \
    --preprocessed-dir data/preprocessed_swing \
    --mode minimal \
    --min-samples 1000000 \
    --target-dist "0.30,0.40,0.30" \
    --days 15 \
    --output results/dataset_selection_minimal.json


由上方的json組合成訓練數據
### 產生訓練資料
python scripts/extract_tw_stock_data_v7.py    --preprocessed-dir ./data/preprocessed_swing  --output-dir ./data/processed_v7 --config configs/config_pro_v7_optimal.yaml --json ./data/dataset_selection.json


### 訓練模型
python scripts\train_deeplob_v5.py --config configs\train_v5.yaml --data-dir data\processed_v7\npz

python scripts\train_deeplob_v5.py --config configs\train_v5_experiment4_practical.yaml --data-dir data\processed_v7\npz
python scripts\train_deeplob_v5.py --config configs\train_v5_experiment4.yaml --data-dir data\processed_v7\npz




### 訓練
deeplob + PPO

python scripts/train_sb3_deeplob.py --test


# 使用預設配置訓練 1M steps
python scripts/train_sb3_deeplob.py

# 自訂訓練步數
python scripts/train_sb3_deeplob.py --timesteps 500000



#分析數據
python scripts/analyze_tensorboard.py --logdir logs/sb3_deeplob/PPO_5 --output results/analysis.json







###穩定性驗證
python scripts\stability_check.py --preprocessed-dir data\preprocessed_v5_1hz --output-dir data\stability_check --train-window 6    --test-window 2 --step 4


步驟 2: 生成訓練數據（已修復洩漏 ✅）

**目的**: 從 NPZ 生成訓練數據（已修復 bfill 洩漏）
python scripts\extract_tw_stock_data_v6.py --preprocessed-dir data\preprocessed_v5_1hz --output-dir data\processed_v6 --config configs\config_pro_v5_ml_optimal.yaml

python scripts\extract_tw_stock_data_v6.py --preprocessed-dir .\data\preprocessed_v5_1hz --output-dir .\data\processed_v6 --config   .\configs\config_pro_v5_ml_optimal.yaml


##檢查資料健康度
python scripts\data_health_check.py --train-npz data\processed_v6\npz\stock_embedding_train.npz --val-npz data\processed_v6\npz\stock_embedding_val.npz --test-npz data\processed_v6\npz\stock_embedding_test.npz --output-dir data\processed_v6\health_check

### 訓練模型
python scripts\train_deeplob_v5.py --config configs\train_v5.yaml --data-dir data\processed_v7\npz




## 分析deeplob 數據
python scripts\monitor_deeplob.py --log-dir logs/logs/deeplob_v5_exp6b







##取資料
python scripts/extract_tw_stock_data_v5.py
##只統計不生成資料# 僅統計模式（待實作）
python scripts/extract_tw_stock_data_v5.py --input-dir ./data/temp --output-dir ./data/volatility_only --config configs/config_pro_v5_balanced_optimal.yaml --stats-only  

python scripts/extract_tw_stock_data_v5.py --input-dir ./data/temp --output-dir ./data/processed_v5_fixed --config ./configs/config_pro_v5_ml_optimal.yaml 
python scripts/extract_tw_stock_data_v5.py --config configs/config_pro_v5_ml_optimal.yaml --output ./data/processed_v5_fixed

### 檢查權重
python diagnose_weights_emergency.py 




###測試
python scripts/preprocess_single_day.py --input ./data/temp/20250901.txt --output-dir ./data/preprocessed_v5_1hz --config ./configs/config_pro_v5_ml_optimal.yam



##篩選 2% 震盪資料
python scripts/extract_tw_stock_data_v5.py --config configs/config_pro_v5_filter2.0.yaml --output-dir ./data/processed_v5_filter2.0

步驟 1: 快速驗證（5-10 分鐘）
python scripts/verify_fix_v5.py --input-dir ./data/temp --output-dir ./data/test_fix --max-files 5







取資料
##新版本
python scripts/extract_tw_stock_data_v3.py --auto-alpha --relativize --no-cross-day --use-k-buffer --save-normalizer --enforce-label-health-day --alpha-min 0.0005 --alpha-max 0.01

###檢查資料是否有 price 
python check_data_keys.py

檢查數據
python scripts/check_processed_data.py

## 訓練 deeplob
python scripts/train_deeplob_generic.py --config configs/deeplob_generic_config.yaml --epochs 30 --early-stop --test-after-train

## 分析deeplob 數據
python scripts\monitor_deeplob.py --log-dir logs/deeplob_v5_fixed

### 來驗證模型是否開始交易。
scripts/check_trading_behavior.py 











conda activate deeplob

##提取資料前先測試alpha值
python test_alpha_values.py
##提取數據

##V3
python scripts/extract_tw_stock_data_v3.py --temp-dir data/temp --output-dir data/processed --min-ticks 1000 --seq-len 100 --k 50 --alpha-auto-p 0.33 --alpha-min 0.0005 --alpha-max 0.01 --rolling-days 5 --split-mode temporal --max-samples-per-stock-per-day 15000 --enforce-label-health-day --max-class-ratio 0.75 --clip-outliers --clip-sigma 5.0 --clip-mode post

###方案B：完整重訓（最佳品質）
python scripts/extract_tw_stock_data_v3.py --temp-dir data/temp --output-dir data/processed --min-ticks 1000 --seq-len 100 --k 20 --alpha 0.003 --alpha-min 0.002 --alpha-max 0.005 --rolling-days 5 --split-mode temporal --max-samples-per-stock-per-day 15000 --enforce-label-health-day  --max-class-ratio 0.60 --clip-outliers --clip-sigma 5.0 --clip-mode post

##新版本
python scripts/extract_tw_stock_data_v3.py --auto-alpha --relativize --no-cross-day --use-k-buffer --save-normalizer

##模型測試
python scripts/train_deeplob_generic.py --config configs/deeplob_generic_config.yaml --test-only --resume checkpoints/deeplob_generic_best.pth


##自動批次
REEXTRACT_DATA.bat


檢查數據
python scripts/check_processed_data.py

"""特徵異常值診斷腳本
python scripts/diagnose_features.py

步驟 1: 快速測試（1 epoch，約 3-5 分鐘）
python scripts/train_deeplob_generic.py --config configs/deeplob_generic_config.yaml --epochs 1 --early-stop --early-stop-patience 5

正常執行(訓練)
python scripts/train_deeplob_generic.py --config configs/deeplob_generic_config.yaml --epochs 30 --early-stop --test-after-train

完美！現在您可以執行這個測試腳本：
python scripts/test_best_model.py


### RL ppo
    # 完整訓練 (500 迭代)
    python scripts/train_rl.py --num-iterations 500 --num-workers 16
	python scripts/train_rl.py --num-iterations 500 --num-workers  4 --num-gpus 1 --no-resume

### RL 訓練後
快速評估

python scripts/evaluate_rl_quick.py --num-episodes 10


檢查 1: 測試真實台股成本（關鍵！）
python scripts/evaluate_rl_quick.py --num-episodes 100 --transaction-cost 0.00442 --data-mode test




# 1. 刪除無效的舊模型(新訓) 
#rm checkpoints/*.pth

# 2. 重新訓練（使用修正後的腳本） == 棄用
#python scripts/train_deeplob_stock_embedding.py

##建立通用腳本
# 1. 執行訓練（30 epochs，預計 2-4 小時）
python scripts/train_deeplob_generic.py --config configs/deeplob_generic_config.yaml --early-stop 

python scripts/train_deeplob_generic.py --config configs/deeplob_generic_config.yaml --early-stop --early-stop-patience 10 --test-after-train

#python scripts/train_deeplob_generic.py --config configs/deeplob_generic_config.yaml

python scripts/train_deeplob_generic.py --config configs/deeplob_generic_config.yaml --early-stop --early-stop-patience 10 --test-after-train

⚠️  發現 1 個問題：
  1. ❌ 特徵尺度差異大：最大標準差 (5.63) 是最小標準差 (1.87) 的 3.0 倍
python scripts/clip_features.py --process-all --threshold 5.0




最佳解決方案：在標準化後加入 Clipping
tensorboard --logdir=logs/deeplob_stock_embedding --port=6006




# 3. 驗證新模型
python scripts/quick_validate_deeplob.py


訓練數據 (V5)
========================================================================================================================
| Epoch | Train Loss | Val Loss | Train Acc | Val Acc    | Val F1 (W) | Val F1 (U) | LR        | Grad |
| ----- | ---------- | -------- | --------- | ---------- | ---------- | ---------- | --------- | ---- |
| 1     | 1.0835     | 1.0415   | 39.87    % | 48.48%     | 0.4466     | 0.4466     | 0.000000  | 2.08 |
| 2     | 1.0534     | 1.0246   | 44.35    % | 48.77%     | 0.4679     | 0.4679     | 0.000000  | 1.67 |
| 3     | 1.0413     | 1.0177   | 45.82    % | 49.14%     | 0.4774     | 0.4774     | 0.000000  | 1.75 |
| 4     | 1.0326     | 1.0124   | 46.86    % | 49.42%     | 0.4803     | 0.4803     | 0.000001  | 1.85 |
| 5     | 1.0248     | 1.0069   | 47.74    % | 49.51%     | 0.4847     | 0.4847     | 0.000001  | 2.09 |
| 6     | 1.0161     | 1.0016   | 48.63    % | 49.66%     | 0.4885     | 0.4885     | 0.000001  | 2.47 |
| 7     | 1.0053     | 0.9970   | 49.85    % | 49.92%     | 0.4912     | 0.4912     | 0.000001  | 2.96 |
| 8     | 0.9933     | 0.9956   | 51.06    % | **49.92%** | 0.4949     | 0.4949     | 0.000001  | 3.57 |
| 9     | 0.9805     | 0.9955   | 52.37    % | 49.88%     | 0.4927     | 0.4927     | 0.000001  | 4.27 |
| 10    | 0.9668     | 0.9957   | 53.72    % | 49.67%     | 0.4916     | 0.4916     | 0.000001  | 5.06 |

註: ** 標記為最佳驗證準確率
     W = Weighted (加權), U = Unweighted (不加權)

======================================================================
訓練摘要 (V5)
======================================================================
已完成 Epoch: 10

最新 Epoch 10:
  Train Loss:    0.9668
  Val Loss:      0.9957
  Train Acc:     53.72%
  Val Acc:       49.67%
  Val F1 (W):    0.4916
  Val F1 (U):    0.4916
  Learning Rate: 0.000001
  Grad Norm:     5.06

最佳驗證準確率: 49.92% (Epoch 8)
  Train Loss:    0.9933
  Val Loss:      0.9956
  Val F1 (W):    0.4949
  Val F1 (U):    0.4949


參數檔:train_v5.yaml
參考調參歷史記錄：docs\20251025-deeplob調參歷史.md 記錄內容,調參後需更新供下次參考用
train_v5.yaml 被調整的參數備註需保留舊的值標註修改原因(每個實驗簡短一行為限(不刪除舊實驗資訊))